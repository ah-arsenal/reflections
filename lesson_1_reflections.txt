# Lesson 1 Reflections
1. diff -u on unix or FC on windows to compare files. 
Diff only shows which lines are different. 
subl lesson_1_reflections.txt # launch sublime with file called lesson_1_reflections.txt (you can replace subl with another editor here if you prefer a different one)
pwd # print working directory - shows what directory you are in
keep lines short when writing code. 


How did viewing a diff between two versions of a file help you see the bug that was introduced?
could see the changed and original line side by side and pick out the error. 

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?
Can borrow old pieces of code or revrt without re-writing. 

git log - every commit that's been made 
message and id 

git diff commit id 1 commit id 2 - diff b/w two versions

commit such that each commit has a clear and logical purpose. 

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

adv. You can include logit to the commit points. disadv. May forget to do it, or make the decision at the wrong time. 

repo - collection of files 
git saves all files in repo. 

git log --stat # info about files that changed 

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately? relatedness of files, and co-reliance for proper function. 

Git clone copies an entire repository 

How can you use the commands git log and git diff to view the history of files?
you look at the the cchanged lines from version to version and revert them to make the old version again. 

How might using version control make you more confident to make changes that could break something? you can always revert and find the old branch and experiment 

use git chechout and then "brankch id" to revert the code in the directory to the old version. 

Now that you have your workspace set up, what do you want to try using Git for?
Would like to use to commit readable, quality code without fear of breaking things to a project. 



